

=====
// --- üßπ 0. Clean state (dev/debug only ‚Äî optional) ---
Clear(colLocalInspections);
Clear(colLocalMedia);
Clear(colMergedInspections);

// --- 1. Initialize camera index (optional) ---
Set(varCameraIndex, 0);

// --- üì¶ 2. Load or Init Local Media ---
LoadData(colLocalMedia, "LocalMedia", true);
If(
    IsBlank(colLocalMedia),
    ClearCollect(
        colLocalMedia,
        {
            Id: GUID(),
            FileName: "",
            FileContent: Blank(),
            InspectionId: "",
            AssetId: "",
            Type: "image",
            Caption: "",
            Captured: Now(),
            CapturedBy: "",
            FilePath: "",
            LocalSaved: false,
            LocalCollectionId: "",
            SyncStatus: "Pending",
            SyncRetryCount: 0,
            SyncErrorMessage: "",
            LastSynced: ""
        }
    );
    Clear(colLocalMedia)
);

// --- üìã 3. Load or Init Local Inspections ---
LoadData(colLocalInspections, "LocalInspections", true);
If(
    IsBlank(colLocalInspections),
    ClearCollect(
        colLocalInspections,
        {
            Id: GUID(),
            InspectionId: "",
            AssetId: "",
            Inspector: "",
            Technician: "",
            InspectedSite: "",
            InspectionDate: Blank(),
            Inspected: "",
            Recorded: Blank(),
            RecordedBy: "",
            SyncStatus: "Pending",
            LastModified: Blank(),
            LastSynced: Blank(),
            SyncRetryCount: 0,
            SyncErrorMessage: "",
            ConflictDetected: false,
            ConflictNotes: ""
        }
    );
    Clear(colLocalInspections)
);

// --- üåê 4. Load online data (Assets, Remote Inspections) or fallback ---
If(Connection.Connected,
    ClearCollect(LocalAssets, Assets);
    SaveData(LocalAssets, "LocalAssets");

    ClearCollect(LocalInspections, Inspections); // Remote Inspections
    SaveData(LocalInspections, "LocalInspections")
,
    LoadData(LocalAssets, "LocalAssets", true);
    LoadData(LocalInspections, "LocalInspections", true)
);

// --- üì∑ 5. Init Camera Index (first lens) ---
Set(varCameraIndex, 0);

// --- üßæ 6. Initialize or Load Metadata (Inspector, Site, etc.) ---
LoadData(LocalInspectionMetadata, "LocalInspectionMetadata", true);
If(
    IsBlank(LocalInspectionMetadata),
    ClearCollect(
        LocalInspectionMetadata,
        {
            InspectionDate: Today(),
            Inspector: "",
            Technician: "",
            InspectedSite: ""
        }
    ),
    Patch(LocalInspectionMetadata, First(LocalInspectionMetadata), { InspectionDate: Today() })
);

// --- üè∑Ô∏è 7. Build Combined Units (Owning + Operating) ---
ClearCollect(TempUnits, {});
ForAll(
    LocalAssets,
    Collect(TempUnits,
        { Unit: OwningUnit },
        { Unit: OperatingUnit }
    )
);
ClearCollect(CombinedUnits, Distinct(TempUnits, Unit));

// --- üîÑ 8. Init colMergedInspections structure ---
ClearCollect(
    colMergedInspections,
    Table(
        {
            InspectionId: Blank(),
            AssetId: Blank(),
            Inspector: Blank(),
            InspectionDate: Blank(),
            Status: Blank(),
            Source: Blank(),
            SyncStatus: Blank()
        }
    )
);

=====

ClearCollect(
    colMergedInspections,
    Table(
        {
            InspectionId: Blank(),
            AssetId: Blank(),
            Inspector: Blank(),
            InspectionDate: Blank(),
            Status: Blank(), // From local, hardcoded to "Synced" for remote
            Source: Blank(), // Local or Remote
            SyncStatus: Blank()
        }
    )
);

// On App Start or Screen OnVisible
Clear(colLocalInspections);
ClearCollect(colLocalMedia, []);
Set(LoggedInUser, User());
// App.OnStart
LoadData(colLocalMedia, "LocalMedia", true);

ClearCollect(colLocalMedia,
    {
        FileName: "",
        FileContent: Blank(),
        InspectionId: "",
        CapturedBy: "",
        Timestamp: Now(),
        SyncStatus: "Pending",
        SyncRetryCount: 0,
        SyncErrorMessage: "",
        LastSynced: Now()  // Correct type established here
    }
);
Clear(colLocalMedia); // Empty it after defining structure

// Try to load saved local inspections from storage
If(
    !IsEmpty(LoadData(colLocalInspections, "LocalInspections", true)),
    Set(colLocalInspections, LoadData(colLocalInspections, "LocalInspections",true)),
    // Initialize as empty if not yet stored
    ClearCollect(
        colLocalInspections,
        {
            InspectionId: "",
            AssetId: "",
            Inspector: "",
            Technician: "",
            InspectedSite: "",
            InspectionDate: Blank(),
            Inspected: "",
            Recorded: Blank(),
            RecordedBy: "",
            SyncStatus: "Pending",
            LastModified: Blank(),
            LastSynced: Blank(),
            MediaRefs: [] // Empty array for linked MediaId references
        }
    )
);


// 1Ô∏è‚É£ Sync data from online (if connected) or load from local (if offline)
If(Connection.Connected,
    // Load Assets from Excel (e.g. OneDrive or SharePoint)
    ClearCollect(LocalAssets, Assets);
    SaveData(LocalAssets, "LocalAssets");

    // Load Inspections from SharePoint
    ClearCollect(LocalInspections, Inspections);
    SaveData(LocalInspections, "LocalInspections");
,
    // Offline fallback
    LoadData(LocalAssets, "LocalAssets", true);
    LoadData(LocalInspections, "LocalInspections", true)
);

// 2Ô∏è‚É£ Init camera index (for photo capture feature)
Set(varCameraIndex, 0);

// 3Ô∏è‚É£ Build distinct list of Units from OwningUnit & OperatingUnit

// Step 1: Flatten Owning + Operating units into a single column collection
ClearCollect(TempUnits, {}); // Reset temp

ForAll(
    LocalAssets,
    Collect(TempUnits,
        { Unit: OwningUnit },
        { Unit: OperatingUnit }
    )
);

// Step 2: Distinct values from both fields
ClearCollect(
    CombinedUnits,
    Distinct(TempUnits, Unit)
);

// 4Ô∏è‚É£ Load or initialize session metadata (date, user, unit info)
// Attempt to load saved metadata
LoadData(LocalInspectionMetadata, "LocalInspectionMetadata", true);

// Check if anything was loaded
If(
    !IsEmpty(LocalInspectionMetadata),
    
    // ‚úÖ Loaded successfully: refresh today's date
    Patch(LocalInspectionMetadata, First(LocalInspectionMetadata), { InspectionDate: Today() }),
    
    // ‚ùå Load failed or first run: initialize
    ClearCollect(
        LocalInspectionMetadata,
        {
            InspectionDate: Today(),
            Inspector: "",
            Technician: "",
            InspectedSite: ""
        }
    )
);
